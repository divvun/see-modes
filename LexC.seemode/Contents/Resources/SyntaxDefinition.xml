<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>


    <!-- 
    The <head> tag encloses some global information about the mode.
    This tag is required.
    -->    

    <head>

        <!-- 
        The <name> specifies the modes name. It is currently not used in the application,
        as the mode name is loaded from Info.plist, however it is a good idea to specify
        this tag to don't get confused if the definitions is outside a bundle during
        development.
        This tag is optional.
        -->    

        <name>LexC Syntax</name>

        <!-- 
        The <charsintokens> and the <charsdelimitingtokens> instruct the syntax highlighter
        where to tokenize the text for fast finding of plain strings.
        The <charsintokens> tag specifies the characters that can occur in strings,
        the <charsdelimitingtokens> tag specifies the tags that cannot occur in strings.
        One of these tags has to be specified.
        Tip: Use CDATA here.
        -->    

        <charsintokens>
            <![CDATA[_0987654321-aábcčdđefghijklmnŋopqrsštŧuvwxyzžæäøöåAÁBCČDĐEFGHIJKLMNŊOPQRSŠTŦUVWXYZŽÆÄØÖÅ@% ]]>
        </charsintokens> 
        <!-- <charsdelimitingtokens>[CDATA[ -]]></charsdelimitingtokens> -->
    </head>


    <!-- 
    The <states> tag encloses all syntax states.
    States are areas of the test that begin and end with an regex like comments or strings,
    with exception of the default state, that exists anywhere where no other state exists.
    This tag is required.
    -->    

    <states>
    
        <!-- 
        The <default> tag specifies what is colored within the default state (see above).
        It features the following attributes, all optional if not noted otherwise:
            id
                Has to be a unique string. Has to be specified.
                
        -->    
    
        <default id="Base" scope="meta.default">

            <!-- 
            The <keywords> tag specifies keyword groups within the current state.
            It features the following attributes, all optional if not noted otherwise:
                id
                    Has to be a unique string. Has to be specified.
                casesensitive
                    yes     This group is case sensitive (default)
                    no      Ignore case for the group
                useforautocomplete
                    yes     Add this group's strings to the autocomplete dictionary (default)
                    no      Don't add to autocomplete dictionary
            -->    

            <keywords id="Keywords" casesensitive="yes" useforautocomplete="yes" scope="keyword">
            
                <!-- 
                    <string> tags specify plain text to be colored. If your tag does not
                    get colored, check in <charsintokens> if you are tokenizing correctly.             
                -->    
            
				<string>LEXICON</string>
				<string>Multichar_Symbols</string>

                <!-- 
                    <regex> tags specify regular expression to be colored. 
                    Only the first group will be colored, so enclose the part to color
                    with parens.
                    
                    The example colors digits prefixed by foo. (only the digits)             
                -->    

				<!--regex> (\w) ("\w+" )?;</regex> < Continuation lexicons -->
				<!--regex>^ ?([\w+/-]+):</regex> < Upper -->

            </keywords>

            <keywords id="Lexicon name" scope="language.subroutine.method.definition">
                <regex>LEXICON ([^\n\r\s]+)</regex>
            </keywords>

            <!-- % can be followed by: "*~ etc, add any missing symbol to the lists below: -->
            <keywords id="Upper" scope="language.constant">
                <regex>^\s*(.+?)[:+].*?\s+\S*(?: ".*")? ;</regex>
            </keywords>

            <keywords id="UpperLower" scope="language.constant">
                <regex>^\s*([^:\s]+?)\s+\S+(?:\s+".*")?\s*;</regex>
            </keywords>

            <keywords id="Lower" scope="language.variable.instance">
                <regex>[^%]:(.*?)\s+\S+(?: ".*")?\s*;</regex>
            </keywords>

            <keywords id="Continuation lexicon" scope="language.subroutine.method">
                <regex>\s(\S+)(?:\s+".*")?\s*;</regex>
            </keywords>

            <keywords id="Tags" scope="markup.constant.entity">
                <regex>\+([\S&amp;&amp;[^:]]+)[\s\n\r:#]</regex>
            </keywords>

            <keywords id="ApertiumTags" scope="language.variable.string">
                <regex>(%&lt;[A-Za-z0-9[^%]]+%&gt;)</regex>
            </keywords>

            <keywords id="Triggers" scope="language.variable.string">
                <regex>(%\^[1-9]?[a-z]?[A-Z]+)</regex>
            </keywords>

            <keywords id="Escaped Borders and tag prefix" scope="language.variable.string">
                <regex>(%[&lt;>]|\+)</regex>
            </keywords>

            <keywords id="Borders" scope="language.operator">
                <regex>([«»#:;&gt;&lt;])</regex>
            </keywords>

            <!-- This one doesn't work - it is overridden by Upper and Lower; it is
                 strange, since similar expressions for Tags, Triggers and (Escaped) Borders
                 DO work. -->
            <!--keywords id="Flag diacritics" color="#1c80ff">
                <regex>(\@[PNRDCU]\S\@)</regex>
            </keywords-->

            <keywords id="String" scope="string">
                <regex>"([^"]*)"</regex>
            </keywords>

            <state id="Comment" scope="comment.line">
                <begin><regex>![^!]</regex></begin>
                <end><regex>[\n\r]</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
    
            <state id="DocComment" type="comment" scope="comment.block.documentation">
                <begin><regex>!![=≈]? </regex></begin>
                <end><regex>[\n\r]</regex></end>
				<import mode="Markdown" />
            </state>
    
            <!-- This one does work, but because it is a separate state, it destroys the context
                 conditions for Upper and Lower, causing those to fail in their colouring when
                 followed by flag diacritics. -->
            <state id="Flag diacritics" scope="string.symbol">
                <begin><regex>@</regex></begin>
                <end><regex>@</regex></end>
            </state>

            <!--state id="String" color="#fd382f">
                <begin><regex>"</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>
            </state-->
    
            <state id="MulticharSymbols" scope="keyword.variable.global">
                <begin><regex>Multichar_Symbols</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)LEXICON</regex></end>
    
                <state id="CommentInMC" scope="comment.line">
                    <begin><regex>![^!]</regex></begin>
                    <end><regex>[\n\r]</regex></end>
                </state>

                <state id="DocCommentInMC" type="comment" scope="comment.block.documentation">
                    <begin><regex>!![=≈]? </regex></begin>
                    <end><regex>[\n\r]</regex></end>
                    <import mode="Markdown" />
                </state>

                <keywords id="DefinedSuffTags" useforautocomplete="yes" scope="language.variable.string">
                    <regex>(\+[\w/-]+)[\s\n\r]</regex>
                </keywords>
    
                <keywords id="DefinedPrefTags" useforautocomplete="yes" scope="language.variable.string">
                    <regex>([\w/-]+\+)[\s\n\r]</regex>
                </keywords>
    
                <keywords id="DefinedTriggers" useforautocomplete="yes" scope="language.variable.string">
                    <regex>(\%\^[\w/]+)[\s\n\r]</regex>
                </keywords>
    
                <keywords id="DefinedDigraphs" scope="language.variable.string">
                    <regex>\s([[:upper:][:lower:]'][1-9])</regex>
                </keywords>
    
            </state>
        </default>
        
    </states>

</syntax>
